<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Javrania</title>
    <link href="http://javran.github.io//atom.xml" rel="self" />
    <link href="http://javran.github.io/" />
    <id>http://javran.github.io//atom.xml</id>
    <author>
        <name>Javran Cheng</name>
        <email>Javran.c+fromBlogFeed@gmail.com</email>
    </author>
    <updated>2014-03-01T00:00:00Z</updated>
    <entry>
    <title>Add tags to your Hakyll blog</title>
    <link href="http://javran.github.io//posts/2014-03-01-add-tags-to-your-hakyll-blog.html" />
    <id>http://javran.github.io//posts/2014-03-01-add-tags-to-your-hakyll-blog.html</id>
    <published>2014-03-01T00:00:00Z</published>
    <updated>2014-03-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<span class="blog-date">
    2014-03-01 - 
</span>
<span class="blog-tag">
    
        [ 
        <a href="/tags/hakyll.html">hakyll</a>, <a href="/tags/haskell.html">haskell</a>
        ]
    
</span>
<br />
<br />
<div class="blog-main">
<p>As promised, here is a simple tutorial about adding tag supports to your Hakyll blog.</p>
<p>Few things before we start:</p>
<ul>
<li><p>My Hakyll version used for this article is <code>4.4.3.2</code>, other versions shouldn't have much difference.</p></li>
<li><p>If this article looks too verbose, you can just look at <strong>bold sentences</strong>.</p></li>
<li><p>All the changes done below is contained <a href="/assets/add-tags-mondo.tar.bz2">in this archive</a>. You can download, run it and skip rest of this article.</p></li>
</ul>
<p>Let's start from scratch to keep it as simple as possible.</p>
<p>So we initialize a new Hakyll website.</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="co"># initialize the website under dir `mondo`</span>
$ <span class="kw">hakyll-init</span> mondo
$ <span class="kw">cd</span> mondo
<span class="co"># compile the code necessary,</span>
<span class="co"># in order to see the website.</span>
$ <span class="kw">ghc</span> site</code></pre>
<h1 id="write-tags-in-posts">Write tags in posts</h1>
<p>To create tags, we should first learn how to add tags to our posts, this step is easy, look at <a href="https://hackage.haskell.org/package/hakyll-4.4.3.2/docs/Hakyll-Web-Tags.html">the document for tags</a>, it should begin with <code>tags:</code> followed with a comma-separated list.</p>
<p>Now, let's modify posts from <code>mondo/posts</code>:</p>
<p><code>mondo/posts/2012-08-12-spqr.markdown</code>:</p>
<pre><code>---
title: S.P.Q.R.
tags: foo, bar1, bar2
---</code></pre>
<p><code>mondo/posts/2012-10-07-rosa-rosa-rosam.markdown</code>:</p>
<pre><code>---
title: Rosa Rosa Rosam
author: Ovidius
tags: bar1
---</code></pre>
<p><code>mondo/post/2012-11-28-carpe-diem.markdown</code>:</p>
<pre><code>---
title: Carpe Diem
tags: bar2, foo
---</code></pre>
<p><code>mondo/posts/2012-12-07-tu-quoque.markdown</code>:</p>
<pre><code>---
title: Tu Quoque
author: Julius
tags: bar1, bar2
---</code></pre>
<h1 id="fetch-metadata-from-our-posts">Fetch metadata from our posts</h1>
<p>Now we've assigned tags to the posts, next thing is to make them accessible from Haskell codes.</p>
<p>Before we go through all the posts and generate pages, we should build tags using <a href="https://hackage.haskell.org/package/hakyll-4.4.3.2/docs/Hakyll-Web-Tags.html#v:buildTags"><code>buildTags</code></a>.</p>
<p>Unforuntately this function is not well-documented, a short explanation would be : <code>buildTags pattern makeId</code> finds all tags from posts captured by <code>pattern</code>, converts each tag to a corresponding <a href="https://hackage.haskell.org/package/hakyll-4.4.3.2/docs/Hakyll-Core-Identifier.html#t:Identifier"><code>Identifier</code></a> by using <code>makeId</code> and returns a value of type <a href="https://hackage.haskell.org/package/hakyll-4.4.3.2/docs/Hakyll-Web-Tags.html#t:Tags"><code>Tags</code></a>.</p>
<p>From <code>site.hs</code> file, <strong>find these lines</strong>:</p>
<table class="sourceCode haskell numberLines" startFrom="24"><tr class="sourceCode"><td class="lineNumbers"><pre>24
25
26
27
28
29
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell">    match <span class="st">&quot;posts/*&quot;</span> <span class="fu">$</span> <span class="kw">do</span>
        route <span class="fu">$</span> setExtension <span class="st">&quot;html&quot;</span>
        compile <span class="fu">$</span> pandocCompiler
            <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span>    postCtx
            <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> postCtx
            <span class="fu">&gt;&gt;=</span> relativizeUrls</code></pre></td></tr></table>
<p>Insert the following code in front of it:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- build up tags</span>
tags <span class="ot">&lt;-</span> buildTags <span class="st">&quot;posts/*&quot;</span> (fromCapture <span class="st">&quot;tags/*.html&quot;</span>)</code></pre>
<p>The code region above says: find all tags by searching the metadate of posts found by pattern <code>posts/*</code>, and the corresponding path for each tag will be of form <code>tags/*.html</code>. (e.g.Â for tag <code>foo</code>, you can generate a list of all posts that contains tag <code>foo</code> under URL: <code>{your-website}/tags/foo.html</code>.)</p>
<p>After tags are generated, we need to tell the post generator to include the corresponding tag informations for each tag, this is done by modifying <code>postCtx</code>. (for now you don't have to understand the detail of <code>postCtx</code> if you just want to setup up tags.)</p>
<p>Put the following definition somewhere in your <code>site.hs</code>, I choose to put it right after the definition of <code>postCtx</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">postCtxWithTags ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span>
postCtxWithTags tags <span class="fu">=</span> tagsField <span class="st">&quot;tags&quot;</span> tags <span class="ot">`mappend`</span> postCtx</code></pre>
<p>And then change all the occurrence of <code>postCtx</code> inside the code region mentioned above.</p>
<p>After this change, <strong>the code region should look like</strong>:</p>
<table class="sourceCode haskell numberLines" startFrom="24"><tr class="sourceCode"><td class="lineNumbers"><pre>24
25
26
27
28
29
30
31
32
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell">    <span class="co">-- build up tags</span>
    tags <span class="ot">&lt;-</span> buildTags <span class="st">&quot;posts/*&quot;</span> (fromCapture <span class="st">&quot;tags/*.html&quot;</span>)

    match <span class="st">&quot;posts/*&quot;</span> <span class="fu">$</span> <span class="kw">do</span>
        route <span class="fu">$</span> setExtension <span class="st">&quot;html&quot;</span>
        compile <span class="fu">$</span> pandocCompiler
            <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span>    (postCtxWithTags tags)
            <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> (postCtxWithTags tags)
            <span class="fu">&gt;&gt;=</span> relativizeUrls</code></pre></td></tr></table>
<h1 id="template-pages">Template pages</h1>
<p>Now we need to add some changes to our templates, to make tags visible.</p>
<p>I think the following changes in this section are self-explanatory even if you knows nothing about how template works. So Let's go though them quickly.</p>
<p><strong>Modify your <code>templates/post.html</code> to make it looks like</strong>:</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;info&quot;</span><span class="kw">&gt;</span>
    Posted on $date$
    $if(author)$
        by $author$
    $endif$
<span class="kw">&lt;/div&gt;</span>
<span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;info&quot;</span><span class="kw">&gt;</span>
    $if(tags)$
    Tags: $tags$
    $endif$
<span class="kw">&lt;/div&gt;</span>

$body$</code></pre>
<p>Now we create the template for tag pages which lists all posts containing the corresponding tags. Since we already have a template for listing posts(<code>template/post-list.html</code>), we can simply reuse it.</p>
<p>This is done by <strong>creating a new file: <code>templates/tag.html</code>, with the following content</strong>:</p>
<pre class="sourceCode html"><code class="sourceCode html">$partial(&quot;templates/post-list.html&quot;)$</code></pre>
<h1 id="generate-tag-pages">Generate tag pages</h1>
<p>This is the final step, we generate tag pages based on the templates we've written.</p>
<p><strong>Put the following code somewhere after we build up <code>tags</code>,</strong> I choose to place it right after the line <code>tags &lt;- buildTags</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">    tagsRules tags <span class="fu">$</span> \tag pattern <span class="ot">-&gt;</span> <span class="kw">do</span>
        <span class="kw">let</span> title <span class="fu">=</span> <span class="st">&quot;Posts tagged \&quot;&quot;</span> <span class="fu">++</span> tag <span class="fu">++</span> <span class="st">&quot;\&quot;&quot;</span>
        route idRoute
        compile <span class="fu">$</span> <span class="kw">do</span>
            posts <span class="ot">&lt;-</span> recentFirst <span class="fu">=&lt;&lt;</span> loadAll pattern
            <span class="kw">let</span> ctx <span class="fu">=</span> constField <span class="st">&quot;title&quot;</span> title
                      <span class="ot">`mappend`</span> listField <span class="st">&quot;posts&quot;</span> postCtx (return posts)
                      <span class="ot">`mappend`</span> defaultContext

            makeItem <span class="st">&quot;&quot;</span>
                <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/tag.html&quot;</span> ctx
                <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> ctx
                <span class="fu">&gt;&gt;=</span> relativizeUrls</code></pre>
<p>Now it's done, recompile <code>site.hs</code> and have fun!</p>
<h1 id="result">Result</h1>
<p>Few screenshots after we adding tags:</p>
<div class="figure">
<img src="/assets/add-tags-result-1.jpg" alt="Inside posts" /><p class="caption">Inside posts</p>
</div>
<div class="figure">
<img src="/assets/add-tags-result-2.jpg" alt="Tag page" /><p class="caption">Tag page</p>
</div>
<p>I also provide the final version of <code>mondo</code> directory <a href="/assets/add-tags-mondo.tar.bz2">here</a>.</p>
<h1 id="acknowledgement">Acknowledgement</h1>
<p>Thanks for the big help from <a href="https://github.com/eakron/variadic.me">the source code</a> of <a href="https://variadic.me/">variadic.me</a>.</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Type tetris and typeclassopedia</title>
    <link href="http://javran.github.io//posts/2014-02-28-type-tetris-and-typeclassopedia.html" />
    <id>http://javran.github.io//posts/2014-02-28-type-tetris-and-typeclassopedia.html</id>
    <published>2014-02-28T00:00:00Z</published>
    <updated>2014-02-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<span class="blog-date">
    2014-02-28 - 
</span>
<span class="blog-tag">
    
        [ 
        <a href="/tags/type-tetris.html">type-tetris</a>, <a href="/tags/typeclassopedia.html">typeclassopedia</a>, <a href="/tags/haskell.html">haskell</a>
        ]
    
</span>
<br />
<br />
<div class="blog-main">
<h1 id="lets-make-our-way-to-haskell">Let's make our way to Haskell</h1>
<p>I've become one interested in Haskell for quite a while, but I think the only book I've read about Haskell is <a href="http://learnyouahaskell.com/">LYAH</a>. For more advanced topics, I just read articles from both <a href="http://www.haskell.org/haskellwiki/Introduction">haskell.org</a> and <a href="https://en.wikibooks.org/wiki/Haskell">Haskell wikibooks</a>. But as I dig deeper into more genius concepts and ideas in Haskell, things become complicated and mind-blowing and the biggest obstacle for me is that I have little understanding about types, which is ubiquitous in the world of Haskell.</p>
<p>Today I'd like to share two interesting stuffs which, IMHO, would help you to learn more about Haskell: âtype-tetrisâ and âtypeclassopediaâ.</p>
<h1 id="type-tetris">Type-tetris</h1>
<p>Just few days ago I came across <a href="http://www.reddit.com/r/haskell/comments/1yvfmc/programming_with_types_not_tutorials/">this link</a>, which eventually gave me an article: <a href="https://www.fpcomplete.com/user/chowells79/types-not-tutorials">Programming With Types, Not Tutorials</a>. In this article, the author shows us how to make Haskell code work as expected while have least understanding about underlying complex mathematical concepts. After reading this article, I realized that it might not be our responsibility to get full knowledge about âhow does it workâ, but we should really focus on âhow to make it workâ.</p>
<p>I think this is the beauty of Haskell: thanks to its strong and statical type system, when some Haskell type-checks, we can almost be confident to say that it should work as expected. On the other hand, we should also be as lazy as Haskell in some sense, since no one puts a gun in your head and say âyou should figure out how exactly it worksâ, we can just leave all the underlying math and proofs unexplored until we need it.</p>
<p>Here I collect some comments on the previous Reddit link:</p>
<blockquote>
<p>drb226: This is what I like to call âtype tetris.â It's fun, and you end up with correct programs without even having to understand what you just assembled. â¦</p>
</blockquote>
<blockquote>
<p>camccann: I got through most of my physics courses by relying on dimensional analysis and hoping that if the units were right, so was the equation. It worked surprisingly often.</p>
</blockquote>
<p>If I understand correctly, as I've previous said in my twitter, the type itself is capable of carrying constraints with it, So types have already embeded with properties and proofs, and we can use types happily without knowing too much about what is going on.</p>
<p>I like the idea of âtype tetrisâ: let's just get started by using functions without âeagerlyâ understanding it. And see if we can grab some ideas when we are playing with it. By doing this, we focus more on âhow to make it workâ rather than âhow it worksâ.</p>
<h1 id="typeclassopedia">Typeclassopedia</h1>
<p>In addition, I happen to know that there is a totally different way of learning Haskell: <a href="http://www.haskell.org/haskellwiki/Typeclassopedia">Typeclassopedia</a>. This is an article recommended by many people in Stack Overflow, which covers some basic understanding of how types are related to each other. By reading this article, we are trying to answer the question of âhow it worksâ but are less interested in âhow to make it workâ.</p>
<h1 id="summary">Summary</h1>
<p>So here I've shown you two (potential) ways of learning Haskell and fortunately you can take both ways and hope the experience gained from both sides would help each other and bring you to a higher level understanding of Haskell.</p>
<p>For myself, as a starting point of my type-tetris, I explored a little about <a href="http://stackoverflow.com/questions/13352205/what-are-free-monads">Free Monad</a> few days about, hopefully I'll write up another article in weekends to share the code and my thoughts. For typeclassopedia, I haven't read much. A potential plan would be to play âtype-tetrisâ with stuffs mentioned in the typeclassopedia first, and then read the corresponding chapter to shed some light.</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Yet another beginning</title>
    <link href="http://javran.github.io//posts/2014-02-25-yet-another-beginning.html" />
    <id>http://javran.github.io//posts/2014-02-25-yet-another-beginning.html</id>
    <published>2014-02-25T00:00:00Z</published>
    <updated>2014-02-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<span class="blog-date">
    2014-02-25 - 
</span>
<span class="blog-tag">
    
        [ 
        <a href="/tags/thought.html">thought</a>
        ]
    
</span>
<br />
<br />
<div class="blog-main">
<p>I think it's not surprising if I say I've made my decision(again) to restart writing blogs and keeping track of my personal pages.</p>
<p>This time I switch from <a href="https://github.com/jekyll/jekyll">jekyll</a> to <a href="http://jaspervdj.be/hakyll/">hakyll</a>. It doesn't mean jekyll is not a good choice, this is just because I feel like becoming a Haskell fans and of course I'd like to get more involved with Haskell stuffs. Hakyll, in this sense, fits me better.</p>
<p>These days I did some sort of work to apply some themes to make my hakyll site looks better. And the final choice I come up with is to use <a href="http://getbootstrap.com/">bootstrap</a> for a basic framework, and use <a href="http://www.lavishbootstrap.com/">lavish</a> to make my own theme.</p>
<p>After I felt good about how the website looks, I moved my past posts from jekyll to hakyll, which is actually quite easy and just quites few lines of changes. It's great that Hakyll uses <a href="http://johnmacfarlane.net/pandoc/">pandoc</a> , which is another fascinating project written in Haskell, to deal with HTML file generating. Pandoc just makes the data migration smooth and in addition makes more source file formats available (I think this is a big win comparing with jekyll).</p>
<p>And then some other stuffs like tags were implemented last weekends, but unfortunately when I start searching for tutorials about how can I enable tags in Hakyll, there is not much documents that I can refer to. Hakyll does have some documents lying in Hackage, but I believe that these documents are incomplete and insufficient to work out all the details.</p>
<p>The most helpful thing provided by Hakyll's website finally turns out to be <a href="http://jaspervdj.be/hakyll/examples.html">these example websites with source codes</a>. I figured out how to add and organize tags by looking at some source codes from these websites.</p>
<p>So the next thing I can think about, is to write a tutorial about how I add tags to my own blog. I believe this will familiarize myself with Hakyll, and make more features available to Hakyll newbies like me.</p>
<p>However, you should never expect that tutorial coming out quickly, as things are getting me really busy these days.</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Keep thinking</title>
    <link href="http://javran.github.io//posts/2013-04-19-keep-thinking.html" />
    <id>http://javran.github.io//posts/2013-04-19-keep-thinking.html</id>
    <published>2013-04-19T00:00:00Z</published>
    <updated>2013-04-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<span class="blog-date">
    2013-04-19 - 
</span>
<span class="blog-tag">
    
        [ 
        <a href="/tags/thought.html">thought</a>
        ]
    
</span>
<br />
<br />
<div class="blog-main">
<p>Many things have changed since last update. It might be a good pretext that I'm doing my internship so have no time to get things updated here.</p>
<p>Anyway, At least I'm still trying to make me active by commit codes to github.com :)</p>
<h1 id="what-ive-done-for-these-days">What I've done for these days?</h1>
<p>Working on my repo: <a href="https://github.com/Javran/Thinking-dumps">thinking-dumps</a>, I think it's a great idea to force myself keep doing things that can extend my knowledge.</p>
<p>I've finished reading on 2 books:</p>
<ul>
<li><p>Seven Languages in Seven Weeks</p>
<p>Great book that show me 7 different programming languages.</p></li>
<li><p>Teach Yourself Scheme in Fixnum Days</p>
<p>I'd like to start reading SICP, and I think some basic knowledge about Scheme might be helpful.</p></li>
</ul>
<h1 id="what-im-doing">What I'm doing?</h1>
<ul>
<li><p>SICP</p>
<p>Now I'm working on <a href="http://mitpress.mit.edu/sicp/">SICP</a>. I felt excited when I found the last task was to implement a complier of Scheme. And it will be a great work if I can complete all the exercises in this book.</p></li>
<li><p>F Sharp</p>
<p>Just want to learn another language. And since F# is a member of .Net language, I think I can use it as well as take advantage of other .Net languages (mainly C#) in my future time. BTW: LINQ is great, which brings some concepts from functional programming into .Net's world :) The book I'm currently working with is âProgramming F#â. You can see it is a branch in my repo. I'd merge it into master branch as soon as I've finish exploring this book.</p></li>
<li><p>Internship</p>
<p>Of course I need to do my real job. It is a good job that I have interest in, despite sometimes I felt exhausted or disappointed.</p></li>
</ul>
<h1 id="what-im-going-to-do">What I'm going to do?</h1>
<ul>
<li><p>Programming with Haskell</p>
<p>Haskell is my favorite! I'll like to read Real World Haskell, and come up with some applications.</p></li>
<li>writing a sudoku solver</li>
<li>writing a sokoban game with GUI</li>
<li>exploring xmonad</li>
<li><p>a snake game solver (by finding Eulerian paths) (try to use ncurse bindings)</p></li>
</ul>
<p>I'll try to achieve things listed above, but I have no idea about when I'll achieve all of them.</p>
<p>All in all, I'd like to keep thinking and be ready to share everything I have explored.</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Android development without eclipse</title>
    <link href="http://javran.github.io//posts/2012-10-29-android-development-without-eclipse.html" />
    <id>http://javran.github.io//posts/2012-10-29-android-development-without-eclipse.html</id>
    <published>2012-10-29T00:00:00Z</published>
    <updated>2012-10-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<span class="blog-date">
    2012-10-29 - 
</span>
<span class="blog-tag">
    
        [ 
        <a href="/tags/android.html">android</a>, <a href="/tags/vim.html">vim</a>, <a href="/tags/eclipse.html">eclipse</a>
        ]
    
</span>
<br />
<br />
<div class="blog-main">
<p>Of course it was really handy using eclipse for android development, however recently I don't know what the hell eclipse is doing background, it does not respond frequently when I am editing java codes and the only thing I could do is to kill it.</p>
<p>Maybe it is because I've added a 1G memory? And everything keep working except eclipse? Or maybe it is because I've got too much plugin? But all I have is the plugins installed following the ADT installation instructions.</p>
<p>Get rid of eclipse! At least I don't want to get me mad again.</p>
<p>Then currently I might have found the way, by making use of vim and eclim, the latter runs eclipse headlessly.</p>
<p>Just keep a memo for myself about how to develop android programs without eclipse.</p>
<p>This post will keep merging things I think necessary for me to develop android apps.</p>
<p>Since I'm not familiar with vim though I've used it for a long time, I might keep some basic knowledge about vim here.</p>
<h1 id="tools">Tools</h1>
<ul>
<li>vim</li>
<li><a href="http://eclim.org/install.html">Eclim</a></li>
</ul>
<h1 id="how-to-xxx">How to XXX</h1>
<h2 id="connect-with-eclim">connect with Eclim</h2>
<p>Eclim works as a daemon, go to your eclipse root directory, run <code>./eclimd start</code> so that eclim will be started as daemon.</p>
<p>to shutdown the daemon, use command <code>:ShutdownEclim</code> or run <code>$ECLIPSE_HOME/eclim -command shutdown</code></p>
<p>Open a vim, use command <code>:PingEclim</code>, if you can see the version of eclim and eclipse, the installation of eclim is done</p>
<h2 id="create-android-project">create android project</h2>
<p>open vim, create project:</p>
<p><code>:ProjectCreate {project_path} -n android</code></p>
<p>and <code>.project</code> as well as <code>.classpath</code> should have been generated.</p>
<h2 id="project-commands">project commands</h2>
<p><code>:ProjectList</code> prints a list of all projects available in eclipse.</p>
<p><code>:ProjectTree {project name}</code> show the project root directory and its structure.</p>
<p><code>:ProjectDelete {project name}</code> removes project</p>
<h2 id="build-install-project">build &amp; install project</h2>
<p>run <code>:Ant debug install</code> in the project's root directory, and the built .apk file is located at <code>./bin</code></p>
<p>note that <code>ant</code> requires <code>build.xml</code> in the project's root directory, if you cannot find one, use <code>android update project -p {project path} --n {project name}</code> to generate one.</p>
<h2 id="code-completion">code completion</h2>
<p><code>Ctrl+x Ctrl+u</code> to open suggestions <code>Ctrl+p</code> move to the next</p>
<h2 id="command-mapping">command mapping</h2>
<p>edit <code>.vimrc</code></p>
<pre class="vim"><code>set &lt;m-i&gt;=^[i
set &lt;m-o&gt;=^[o
set &lt;m-c&gt;=^[c

&quot;alt+i for auto import neccessary packages
&quot;alt+o for open project
nmap &lt;m-i&gt; :JavaImportOrganize&lt;CR&gt;
nmap &lt;m-o&gt; :ProjectTree&lt;CR&gt;
nmap &lt;m-c&gt; :JavaCorrect&lt;CR&gt;</code></pre>
<p>note: <code>^[i</code> is inputted by <code>&lt;ctrl+v&gt;&lt;alt+i&gt;</code> and <code>^[o</code> is inputted by <code>&lt;ctrl+v&gt;&lt;alt+o&gt;</code>, etc.</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Game of thinking</title>
    <link href="http://javran.github.io//posts/2012-10-19-game-of-thinking.html" />
    <id>http://javran.github.io//posts/2012-10-19-game-of-thinking.html</id>
    <published>2012-10-19T00:00:00Z</published>
    <updated>2012-10-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<span class="blog-date">
    2012-10-19 - 
</span>
<span class="blog-tag">
    
        [ 
        <a href="/tags/thought.html">thought</a>, <a href="/tags/fun.html">fun</a>, <a href="/tags/philosophy.html">philosophy</a>
        ]
    
</span>
<br />
<br />
<div class="blog-main">
<p>Last night before I went to sleep, I raised an interesting question at my twitter:</p>
<blockquote>
<p>Given that the end of this world do exist and when this moment comes, god gives you an option that he can transfer your awareness to another parallel world which has not triggerred the condition of the end, but in return you would not have any means to intervene with that parallel world. Will you accept?</p>
</blockquote>
<p>I argee that by doing this transfer, you are undetectable by anything in that world, so it makes no sense from the other world's people's point of view. Some friends mention me it just like watching a movie, you can do nothing but watching, is that being an observer of another fork of world interesting? It is hard to figure out :)</p>
<p>Another suggestion from one of my friends is that âif you can suicide mentally, there is no hurt to go to another world, you can terminate yourself when you feel boring.â It is really a good idea but I have more interest in âto suicide mentallyâ. We all know that physical matter can neither be created nor destroyed, is that hold true in our mental world? If that is true, then a pure soul might not be capable of performing an âawareness suicideâ.</p>
<p>Furthermore, for a long time I believe that âdeathâ means a disconnection between the material world and the immaterial world, by transfering my soul to another world I have already disconnected with the world that I come from, am I died? do I exist?</p>
<p>Not long after starting this discussion, I found more interesting things:</p>
<blockquote>
<p>It is possible that at the moment that I accept/refuse the opportunity from god, the world forks again and one of my soul transfers to another parallel world. The âanother parallel worldâ might exactly be the world that we live in, and it is interesting because there will be various observers from the already-termintated world in our world, which cannot be proved or detected.</p>
</blockquote>
<p>Just allow me to take a step further:</p>
<blockquote>
<p>Can these observers see each other? Anyway it is impossible for them to intervene with the world they observing. What will happen if they can interact with each other?</p>
</blockquote>
<p>p.s.</p>
<ul>
<li>I believe I have to practice a lot before I can write intelligible and prolificent English. If there is anything unclear in my post, please feel free to inform me.</li>
<li>Any ideas about the problems mentioned in this post are welcomed of course :)</li>
</ul>
</div>
]]></summary>
</entry>
<entry>
    <title>Made a favicon</title>
    <link href="http://javran.github.io//posts/2012-10-14-made-a-favicon.html" />
    <id>http://javran.github.io//posts/2012-10-14-made-a-favicon.html</id>
    <published>2012-10-14T00:00:00Z</published>
    <updated>2012-10-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<span class="blog-date">
    2012-10-14 - 
</span>
<span class="blog-tag">
    
        [ 
        <a href="/tags/gimp.html">gimp</a>
        ]
    
</span>
<br />
<br />
<div class="blog-main">
<p>Today I attempted to make a favicon for my blog :)</p>
<p>Actually I've designed a logo which is centrosymmetric and contains many curves. Sadly, drawing symmetric curves is really a big challenge for newbies like me, I've tried draw some paths and do some filp and rotation to make it looks symmetric, but the result does not seem very good.</p>
<p>After suffering a lot drawing curves, I decide to change my design so that it will only contain straight lines. By taking advantage of the conversion between paths and selections in gimp, I was able to create this picture. In addition I showed grids when drawing paths so I can draw more precisely.</p>
<p><img src="/images/favicon-export-01.png" alt="My blog's facicon" height="128" weight="128" /></p>
<p>Of course, I'd like to talk about what my favicon means. Though looks like âNâ, it combines âJavâ, short for my English name, and a greek letter âlambdaâ which is highlighted by cyan merely because I thought it was cool.</p>
<p>Now there are some suggestions about making a favicon for newbies like me :)</p>
<ul>
<li><p>Google is your friend. Search to find concepts about âpathâ, âselectionâ in gimp, and their basic operations like âflipâ and ârotateâ.</p></li>
<li><p>Try to use straight lines instead of curve ones in your designs if you find it difficult to handle them properly.</p></li>
<li><p>Make use of âalignmentâ and âgridâ, rather than taking pain to arrage things manually.</p></li>
</ul>
</div>
]]></summary>
</entry>
<entry>
    <title>Another beginning</title>
    <link href="http://javran.github.io//posts/2012-10-13-another-beginning.html" />
    <id>http://javran.github.io//posts/2012-10-13-another-beginning.html</id>
    <published>2012-10-13T00:00:00Z</published>
    <updated>2012-10-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<span class="blog-date">
    2012-10-13 - 
</span>
<span class="blog-tag">
    
        [ 
        <a href="/tags/thought.html">thought</a>
        ]
    
</span>
<br />
<br />
<div class="blog-main">
<p>Though I have had several blogs previously, there are outdated because of my laziness (sorry about that). And so I decide to create this blog thanks to github and <a href="http://jekyllbootstrap.com/">Jekyll-Bootstrap</a>.</p>
<p>Actually reasons are unnecessary for my intention of creating this blog but leaving others unreclaimed, if any, just dumping stuffs that come into my mind and a desire of using English purely(for I'm not a native speaker of English).</p>
<p>Let it be another beginning of my voyage of maintaining blogs. And I hope this time I'm capable of keeping it up-to-date.</p>
</div>
]]></summary>
</entry>

</feed>
